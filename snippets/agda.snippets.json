{
	"begin ≡⟨⟩": {
		"prefix": "begin",
		"body": "begin\n  ${1:?}\n ≡⟨ ${3:?} ⟩\n  ${2:$1}\n∎",
		"description": "begin equiv",
		"scope": "agda"
	},
	"Nat": {
		"prefix": ["\\N", "\\nat"],
		"body": "ℕ",
		"description": "ℕ | Nat",
		"scope": "agda"
	},
	"rightarrow": {
		"prefix": ["\\to", "\\rightarrow", "\\->"],
		"body": "→ ",
		"description": "→",
		"scope": "agda"
	},
	"monus": {
		"prefix": "\\.-",
		"body": "∸",
		"description": "∸",
		"scope": "agda"
	},
	"langle": {
		"prefix": "\\<",
		"body": "⟨",
		"description": "⟨",
		"scope": "agda"
	},
	"rangle": {
		"prefix": "\\>",
		"body": "⟩",
		"description": "⟩",
		"scope": "agda"
	},
	"angles": {
		"prefix": "\\<>",
		"body": "⟨⟩",
		"description": "⟨⟩",
		"scope": "agda"
	},
	"plfa-ex": {
		"prefix": "template-",
		"scope": "agda",
		"body": [
			"import Relation.Binary.PropositionalEquality as Eq",
			"",
			"open Eq using (_≡_; refl; cong; sym)",
			"open Eq.≡-Reasoning using (begin_; _≡⟨⟩_; step-≡; _∎)",
			"open import Data.Nat using (ℕ; zero; suc; _+_; _*_; _∸_)",
			"",
			"-- Exercise ${3}",
			"-- ",
			"module exercise.part1.Induction.Ex${1}_${2} where",
			""
		]
	}
}